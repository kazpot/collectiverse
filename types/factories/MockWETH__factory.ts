/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockWETH, MockWETHInterface } from "../MockWETH";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [],
    name: "DECIMALS",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "INITIAL_SUPPLY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SYMBOL",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604080518082018252600981526808cc2d6ca40ae8aa8960bb1b6020808301918252835180850190945260048452630ae8aa8960e31b9084015281519192916200005f916003916200016f565b508051620000759060049060208401906200016f565b50620000a391503390506200008d6012600a6200035c565b6200009d906305f5e1006200036d565b620000a9565b62000440565b6001600160a01b038216620000db5760405162461bcd60e51b8152600401620000d2906200038f565b60405180910390fd5b8060026000828254620000ef9190620003d1565b90915550506001600160a01b038216600090815260208190526040812080548392906200011e908490620003d1565b90915550506040516001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9062000163908590620003ec565b60405180910390a35050565b8280546200017d906200040f565b90600052602060002090601f016020900481019282620001a15760008555620001ec565b82601f10620001bc57805160ff1916838001178555620001ec565b82800160010185558215620001ec579182015b82811115620001ec578251825591602001919060010190620001cf565b50620001fa929150620001fe565b5090565b5b80821115620001fa5760008155600101620001ff565b634e487b7160e01b600052601160045260246000fd5b80825b600185111562000271578086048111156200024d576200024d62000215565b60018516156200025c57908102905b8002620002698560011c90565b94506200022e565b94509492505050565b6000826200028b5750600162000355565b816200029a5750600062000355565b8160018114620002b35760028114620002be57620002f2565b600191505062000355565b60ff841115620002d257620002d262000215565b8360020a915084821115620002eb57620002eb62000215565b5062000355565b5060208310610133831016604e8410600b84101617156200032a575081810a8381111562000324576200032462000215565b62000355565b6200033984848460016200022b565b9250905081840481111562000352576200035262000215565b81025b9392505050565b60006200035560001984846200027a565b60008160001904831182151516156200038a576200038a62000215565b500290565b60208082528101620003cb81601f81527f45524332303a206d696e7420746f20746865207a65726f206164647265737300602082015260400190565b92915050565b60008219821115620003e757620003e762000215565b500190565b81815260208101620003cb565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200042457607f821691505b602082108114156200043a576200043a620003f9565b50919050565b610c2580620004506000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c80633950935111610097578063a457c2d711610066578063a457c2d7146101ec578063a9059cbb146101ff578063dd62ed3e14610212578063f76f8d781461024b57600080fd5b8063395093511461018057806370a082311461019357806395d89b41146101bc578063a3f4df7e146101c457600080fd5b806323b872dd116100d357806323b872dd146101495780632e0f26251461015c5780632ff2e9dc14610171578063313ce5671461017957600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd14610138575b600080fd5b61010261026e565b60405161010f9190610682565b60405180910390f35b61012b6101263660046106d7565b610300565b60405161010f919061071e565b6002545b60405161010f9190610732565b61012b610157366004610740565b610317565b610164601281565b60405161010f9190610799565b61013c61038b565b6012610164565b61012b61018e3660046106d7565b6103a8565b61013c6101a13660046107a7565b6001600160a01b031660009081526020819052604090205490565b6101026103e4565b6101026040518060400160405280600981526020016808cc2d6ca40ae8aa8960bb1b81525081565b61012b6101fa3660046106d7565b6103f3565b61012b61020d3660046106d7565b61044e565b61013c6102203660046107d0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610102604051806040016040528060048152602001630ae8aa8960e31b81525081565b60606003805461027d90610819565b80601f01602080910402602001604051908101604052809291908181526020018280546102a990610819565b80156102f65780601f106102cb576101008083540402835291602001916102f6565b820191906000526020600020905b8154815290600101906020018083116102d957829003601f168201915b5050505050905090565b600061030d33848461045b565b5060015b92915050565b600061032484848461050f565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156103715760405162461bcd60e51b81526004016103689061088e565b60405180910390fd5b61037e853385840361045b565b60019150505b9392505050565b6103976012600a6109c2565b6103a5906305f5e1006109d1565b81565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161030d9185906103df9086906109f0565b61045b565b60606004805461027d90610819565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156104375760405162461bcd60e51b815260040161036890610a4a565b610444338585840361045b565b5060019392505050565b600061030d33848461050f565b6001600160a01b0383166104815760405162461bcd60e51b815260040161036890610a9b565b6001600160a01b0382166104a75760405162461bcd60e51b815260040161036890610aea565b6001600160a01b0380841660008181526001602090815260408083209487168084529490915290819020849055517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610502908590610732565b60405180910390a3505050565b6001600160a01b0383166105355760405162461bcd60e51b815260040161036890610b3c565b6001600160a01b03821661055b5760405162461bcd60e51b815260040161036890610b8c565b6001600160a01b038316600090815260208190526040902054818110156105945760405162461bcd60e51b815260040161036890610bdf565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906105cb9084906109f0565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516106159190610732565b60405180910390a35b50505050565b60005b8381101561063f578181015183820152602001610627565b8381111561061e5750506000910152565b600061065a825190565b808452602084019350610671818560208601610624565b601f01601f19169290920192915050565b602080825281016103848184610650565b60006001600160a01b038216610311565b6106ad81610693565b81146106b857600080fd5b50565b8035610311816106a4565b806106ad565b8035610311816106c6565b600080604083850312156106ed576106ed600080fd5b60006106f985856106bb565b925050602061070a858286016106cc565b9150509250929050565b8015155b82525050565b602081016103118284610714565b80610718565b60208101610311828461072c565b60008060006060848603121561075857610758600080fd5b600061076486866106bb565b9350506020610775868287016106bb565b9250506040610786868287016106cc565b9150509250925092565b60ff8116610718565b602081016103118284610790565b6000602082840312156107bc576107bc600080fd5b60006107c884846106bb565b949350505050565b600080604083850312156107e6576107e6600080fd5b60006107f285856106bb565b925050602061070a858286016106bb565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061082d57607f821691505b6020821081141561084057610840610803565b50919050565b602881526000602082017f45524332303a207472616e7366657220616d6f756e74206578636565647320618152676c6c6f77616e636560c01b602082015291505b5060400190565b6020808252810161031181610846565b634e487b7160e01b600052601160045260246000fd5b80825b60018511156108f3578086048111156108d2576108d261089e565b60018516156108e057908102905b80026108ec8560011c90565b94506108b7565b94509492505050565b60008261090b57506001610384565b8161091857506000610384565b816001811461092e576002811461093857610965565b6001915050610384565b60ff8411156109495761094961089e565b8360020a91508482111561095f5761095f61089e565b50610384565b5060208310610133831016604e8410600b8410161715610998575081810a838111156109935761099361089e565b610384565b6109a584848460016108b4565b925090508184048111156109bb576109bb61089e565b0292915050565b600061038460001984846108fc565b60008160001904831182151516156109eb576109eb61089e565b500290565b60008219821115610a0357610a0361089e565b500190565b602581526000602082017f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77815264207a65726f60d81b60208201529150610887565b6020808252810161031181610a08565b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b60208201529150610887565b6020808252810161031181610a5a565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b60208201529150610887565b6020808252810161031181610aab565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b60208201529150610887565b6020808252810161031181610afa565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b60208201529150610887565b6020808252810161031181610b4c565b602681526000602082017f45524332303a207472616e7366657220616d6f756e7420657863656564732062815265616c616e636560d01b60208201529150610887565b6020808252810161031181610b9c56fea26469706673582212204b8d33b46953793787743cfb24a115ccdbdf30c877eb4f0436ed88c17a652ce964736f6c634300080b0033";

type MockWETHConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockWETHConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockWETH__factory extends ContractFactory {
  constructor(...args: MockWETHConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockWETH> {
    return super.deploy(overrides || {}) as Promise<MockWETH>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockWETH {
    return super.attach(address) as MockWETH;
  }
  connect(signer: Signer): MockWETH__factory {
    return super.connect(signer) as MockWETH__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockWETHInterface {
    return new utils.Interface(_abi) as MockWETHInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockWETH {
    return new Contract(address, _abi, signerOrProvider) as MockWETH;
  }
}
