/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OrderStruct = {
  exchange: string;
  maker: string;
  taker: string;
  royaltyRecipient: string;
  side: BigNumberish;
  nftAddress: string;
  tokenId: BigNumberish;
  basePrice: BigNumberish;
  listingTime: BigNumberish;
  expirationTime: BigNumberish;
  paymentToken: string;
};

export type OrderStructOutput = [
  string,
  string,
  string,
  string,
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  exchange: string;
  maker: string;
  taker: string;
  royaltyRecipient: string;
  side: number;
  nftAddress: string;
  tokenId: BigNumber;
  basePrice: BigNumber;
  listingTime: BigNumber;
  expirationTime: BigNumber;
  paymentToken: string;
};

export type SigStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

export type SigStructOutput = [number, string, string] & {
  v: number;
  r: string;
  s: string;
};

export interface ExchangeInterface extends utils.Interface {
  functions: {
    "acceptOrder((address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address),(uint8,bytes32,bytes32),(address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))": FunctionFragment;
    "cancelOrdeByViolation((address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "cancelOrder((address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address),(uint8,bytes32,bytes32))": FunctionFragment;
    "cancelledOrFinalized(bytes32)": FunctionFragment;
    "commissionFee()": FunctionFragment;
    "commissionFeeRecipient()": FunctionFragment;
    "createBidOrder((address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address),(address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "createFirstBidOrder((address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "createOrder((address,address,address,address,uint8,address,uint256,uint256,uint256,uint256,address))": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "orders(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "proxyImplementation()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "royaltyFee()": FunctionFragment;
    "secondCommissionFee()": FunctionFragment;
    "setCommissionFee(uint256)": FunctionFragment;
    "setCommissionFeeRecipient(address)": FunctionFragment;
    "setNewProxyImplementation(address)": FunctionFragment;
    "setNewProxyRegistry(address)": FunctionFragment;
    "setRoyaltyFee(uint256)": FunctionFragment;
    "setSecondCommissionFee(uint256)": FunctionFragment;
    "totalNativeBalance()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOrder",
    values: [OrderStruct, SigStruct, OrderStruct, SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrdeByViolation",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOrder",
    values: [OrderStruct, SigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelledOrFinalized",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commissionFeeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createBidOrder",
    values: [OrderStruct, OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createFirstBidOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [OrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "orders", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxyImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondCommissionFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewProxyImplementation",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewProxyRegistry",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyaltyFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondCommissionFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalNativeBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrdeByViolation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelledOrFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commissionFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBidOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createFirstBidOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "orders", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royaltyFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "secondCommissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewProxyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoyaltyFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondCommissionFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNativeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "CancelOrder(bytes32)": EventFragment;
    "MatchedOrder(bytes32,bytes32,address,address,uint256,address)": EventFragment;
    "OrderCreated(uint8,bytes32,address,address,address,address,uint256,uint256,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Received(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MatchedOrder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Received"): EventFragment;
}

export type CancelOrderEvent = TypedEvent<[string], { hash: string }>;

export type CancelOrderEventFilter = TypedEventFilter<CancelOrderEvent>;

export type MatchedOrderEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  {
    buyHash: string;
    sellHash: string;
    maker: string;
    taker: string;
    price: BigNumber;
    paymentToken: string;
  }
>;

export type MatchedOrderEventFilter = TypedEventFilter<MatchedOrderEvent>;

export type OrderCreatedEvent = TypedEvent<
  [
    number,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  {
    side: number;
    hash: string;
    maker: string;
    taker: string;
    royaltyRecipient: string;
    nftAddress: string;
    tokenId: BigNumber;
    basePrice: BigNumber;
    listingTime: BigNumber;
    expirationTime: BigNumber;
    paymentToken: string;
  }
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ReceivedEvent = TypedEvent<
  [string, BigNumber],
  { sender: string; amount: BigNumber }
>;

export type ReceivedEventFilter = TypedEventFilter<ReceivedEvent>;

export interface Exchange extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExchangeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOrder(
      buy: OrderStruct,
      buySig: SigStruct,
      sell: OrderStruct,
      sellSig: SigStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrdeByViolation(
      order: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelOrder(
      order: OrderStruct,
      sig: SigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commissionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    commissionFeeRecipient(overrides?: CallOverrides): Promise<[string]>;

    createBidOrder(
      order: OrderStruct,
      prevOrder: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createFirstBidOrder(
      order: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    orders(arg0: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proxyImplementation(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    royaltyFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    secondCommissionFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCommissionFee(
      newCommissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCommissionFeeRecipient(
      newCommissionFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewProxyImplementation(
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewProxyRegistry(
      newProxyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoyaltyFee(
      newRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSecondCommissionFee(
      newSecondCommissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalNativeBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOrder(
    buy: OrderStruct,
    buySig: SigStruct,
    sell: OrderStruct,
    sellSig: SigStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrdeByViolation(
    order: OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelOrder(
    order: OrderStruct,
    sig: SigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelledOrFinalized(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commissionFee(overrides?: CallOverrides): Promise<BigNumber>;

  commissionFeeRecipient(overrides?: CallOverrides): Promise<string>;

  createBidOrder(
    order: OrderStruct,
    prevOrder: OrderStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createFirstBidOrder(
    order: OrderStruct,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createOrder(
    order: OrderStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  orders(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  proxyImplementation(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

  secondCommissionFee(overrides?: CallOverrides): Promise<BigNumber>;

  setCommissionFee(
    newCommissionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCommissionFeeRecipient(
    newCommissionFeeRecipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewProxyImplementation(
    newImpl: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewProxyRegistry(
    newProxyRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoyaltyFee(
    newRoyalty: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSecondCommissionFee(
    newSecondCommissionFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalNativeBalance(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOrder(
      buy: OrderStruct,
      buySig: SigStruct,
      sell: OrderStruct,
      sellSig: SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrdeByViolation(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelOrder(
      order: OrderStruct,
      sig: SigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commissionFee(overrides?: CallOverrides): Promise<BigNumber>;

    commissionFeeRecipient(overrides?: CallOverrides): Promise<string>;

    createBidOrder(
      order: OrderStruct,
      prevOrder: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createFirstBidOrder(
      order: OrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrder(order: OrderStruct, overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    orders(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    proxyImplementation(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    secondCommissionFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCommissionFee(
      newCommissionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommissionFeeRecipient(
      newCommissionFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewProxyImplementation(
      newImpl: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewProxyRegistry(
      newProxyRegistry: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoyaltyFee(
      newRoyalty: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecondCommissionFee(
      newSecondCommissionFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalNativeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CancelOrder(bytes32)"(hash?: BytesLike | null): CancelOrderEventFilter;
    CancelOrder(hash?: BytesLike | null): CancelOrderEventFilter;

    "MatchedOrder(bytes32,bytes32,address,address,uint256,address)"(
      buyHash?: BytesLike | null,
      sellHash?: BytesLike | null,
      maker?: string | null,
      taker?: null,
      price?: null,
      paymentToken?: null
    ): MatchedOrderEventFilter;
    MatchedOrder(
      buyHash?: BytesLike | null,
      sellHash?: BytesLike | null,
      maker?: string | null,
      taker?: null,
      price?: null,
      paymentToken?: null
    ): MatchedOrderEventFilter;

    "OrderCreated(uint8,bytes32,address,address,address,address,uint256,uint256,uint256,uint256,address)"(
      side?: BigNumberish | null,
      hash?: BytesLike | null,
      maker?: string | null,
      taker?: null,
      royaltyRecipient?: null,
      nftAddress?: null,
      tokenId?: null,
      basePrice?: null,
      listingTime?: null,
      expirationTime?: null,
      paymentToken?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      side?: BigNumberish | null,
      hash?: BytesLike | null,
      maker?: string | null,
      taker?: null,
      royaltyRecipient?: null,
      nftAddress?: null,
      tokenId?: null,
      basePrice?: null,
      listingTime?: null,
      expirationTime?: null,
      paymentToken?: null
    ): OrderCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Received(address,uint256)"(
      sender?: string | null,
      amount?: null
    ): ReceivedEventFilter;
    Received(sender?: string | null, amount?: null): ReceivedEventFilter;
  };

  estimateGas: {
    acceptOrder(
      buy: OrderStruct,
      buySig: SigStruct,
      sell: OrderStruct,
      sellSig: SigStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrdeByViolation(
      order: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelOrder(
      order: OrderStruct,
      sig: SigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commissionFee(overrides?: CallOverrides): Promise<BigNumber>;

    commissionFeeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    createBidOrder(
      order: OrderStruct,
      prevOrder: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createFirstBidOrder(
      order: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    orders(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proxyImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    royaltyFee(overrides?: CallOverrides): Promise<BigNumber>;

    secondCommissionFee(overrides?: CallOverrides): Promise<BigNumber>;

    setCommissionFee(
      newCommissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCommissionFeeRecipient(
      newCommissionFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewProxyImplementation(
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewProxyRegistry(
      newProxyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoyaltyFee(
      newRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSecondCommissionFee(
      newSecondCommissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalNativeBalance(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOrder(
      buy: OrderStruct,
      buySig: SigStruct,
      sell: OrderStruct,
      sellSig: SigStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrdeByViolation(
      order: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelOrder(
      order: OrderStruct,
      sig: SigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelledOrFinalized(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commissionFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commissionFeeRecipient(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createBidOrder(
      order: OrderStruct,
      prevOrder: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createFirstBidOrder(
      order: OrderStruct,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createOrder(
      order: OrderStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    orders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    royaltyFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    secondCommissionFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setCommissionFee(
      newCommissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCommissionFeeRecipient(
      newCommissionFeeRecipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewProxyImplementation(
      newImpl: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewProxyRegistry(
      newProxyRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoyaltyFee(
      newRoyalty: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSecondCommissionFee(
      newSecondCommissionFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalNativeBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
